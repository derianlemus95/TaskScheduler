// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto;
namespace worker {
class HeartBeatRequest;
struct HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class HeartBeatResponse;
struct HeartBeatResponseDefaultTypeInternal;
extern HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskStatus;
struct TaskStatusDefaultTypeInternal;
extern TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;
}  // namespace worker
PROTOBUF_NAMESPACE_OPEN
template<> ::worker::HeartBeatRequest* Arena::CreateMaybeMessage<::worker::HeartBeatRequest>(Arena*);
template<> ::worker::HeartBeatResponse* Arena::CreateMaybeMessage<::worker::HeartBeatResponse>(Arena*);
template<> ::worker::Task* Arena::CreateMaybeMessage<::worker::Task>(Arena*);
template<> ::worker::TaskStatus* Arena::CreateMaybeMessage<::worker::TaskStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace worker {

// ===================================================================

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:worker.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit PROTOBUF_CONSTEXPR Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Task& from) {
    Task::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "worker.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // string commands = 3;
  void clear_commands();
  const std::string& commands() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commands(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commands();
  PROTOBUF_NODISCARD std::string* release_commands();
  void set_allocated_commands(std::string* commands);
  private:
  const std::string& _internal_commands() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commands(const std::string& value);
  std::string* _internal_mutable_commands();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 taskId = 1;
  void clear_taskid();
  int32_t taskid() const;
  void set_taskid(int32_t value);
  private:
  int32_t _internal_taskid() const;
  void _internal_set_taskid(int32_t value);
  public:

  // int32 priority = 2;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:worker.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commands_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t taskid_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class TaskStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:worker.TaskStatus) */ {
 public:
  inline TaskStatus() : TaskStatus(nullptr) {}
  ~TaskStatus() override;
  explicit PROTOBUF_CONSTEXPR TaskStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskStatus(const TaskStatus& from);
  TaskStatus(TaskStatus&& from) noexcept
    : TaskStatus() {
    *this = ::std::move(from);
  }

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStatus& operator=(TaskStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStatus* internal_default_instance() {
    return reinterpret_cast<const TaskStatus*>(
               &_TaskStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskStatus& a, TaskStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskStatus& from) {
    TaskStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "worker.TaskStatus";
  }
  protected:
  explicit TaskStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kTaskIdFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 taskId = 2;
  void clear_taskid();
  int32_t taskid() const;
  void set_taskid(int32_t value);
  private:
  int32_t _internal_taskid() const;
  void _internal_set_taskid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:worker.TaskStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t taskid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:worker.HeartBeatRequest) */ {
 public:
  inline HeartBeatRequest() : HeartBeatRequest(nullptr) {}
  ~HeartBeatRequest() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatRequest(const HeartBeatRequest& from);
  HeartBeatRequest(HeartBeatRequest&& from) noexcept
    : HeartBeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatRequest& operator=(HeartBeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartBeatRequest& a, HeartBeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatRequest& from) {
    HeartBeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "worker.HeartBeatRequest";
  }
  protected:
  explicit HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kWorkerIdFieldNumber = 1,
    kCurrentCapacityFieldNumber = 4,
  };
  // repeated int32 taskId = 2;
  int taskid_size() const;
  private:
  int _internal_taskid_size() const;
  public:
  void clear_taskid();
  private:
  int32_t _internal_taskid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_taskid() const;
  void _internal_add_taskid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_taskid();
  public:
  int32_t taskid(int index) const;
  void set_taskid(int index, int32_t value);
  void add_taskid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      taskid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_taskid();

  // repeated string status = 3;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  const std::string& status(int index) const;
  std::string* mutable_status(int index);
  void set_status(int index, const std::string& value);
  void set_status(int index, std::string&& value);
  void set_status(int index, const char* value);
  void set_status(int index, const char* value, size_t size);
  std::string* add_status();
  void add_status(const std::string& value);
  void add_status(std::string&& value);
  void add_status(const char* value);
  void add_status(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_status();
  private:
  const std::string& _internal_status(int index) const;
  std::string* _internal_add_status();
  public:

  // int32 workerId = 1;
  void clear_workerid();
  int32_t workerid() const;
  void set_workerid(int32_t value);
  private:
  int32_t _internal_workerid() const;
  void _internal_set_workerid(int32_t value);
  public:

  // int32 current_capacity = 4;
  void clear_current_capacity();
  int32_t current_capacity() const;
  void set_current_capacity(int32_t value);
  private:
  int32_t _internal_current_capacity() const;
  void _internal_set_current_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:worker.HeartBeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > taskid_;
    mutable std::atomic<int> _taskid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> status_;
    int32_t workerid_;
    int32_t current_capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:worker.HeartBeatResponse) */ {
 public:
  inline HeartBeatResponse() : HeartBeatResponse(nullptr) {}
  ~HeartBeatResponse() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatResponse(const HeartBeatResponse& from);
  HeartBeatResponse(HeartBeatResponse&& from) noexcept
    : HeartBeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatResponse& operator=(HeartBeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponse*>(
               &_HeartBeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartBeatResponse& a, HeartBeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatResponse& from) {
    HeartBeatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "worker.HeartBeatResponse";
  }
  protected:
  explicit HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 3,
    kWorkerIdFieldNumber = 1,
    kCurrentCapacityFieldNumber = 2,
  };
  // repeated .worker.TaskStatus tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::worker::TaskStatus* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::worker::TaskStatus >*
      mutable_tasks();
  private:
  const ::worker::TaskStatus& _internal_tasks(int index) const;
  ::worker::TaskStatus* _internal_add_tasks();
  public:
  const ::worker::TaskStatus& tasks(int index) const;
  ::worker::TaskStatus* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::worker::TaskStatus >&
      tasks() const;

  // int32 workerId = 1;
  void clear_workerid();
  int32_t workerid() const;
  void set_workerid(int32_t value);
  private:
  int32_t _internal_workerid() const;
  void _internal_set_workerid(int32_t value);
  public:

  // int32 current_capacity = 2;
  void clear_current_capacity();
  int32_t current_capacity() const;
  void set_current_capacity(int32_t value);
  private:
  int32_t _internal_current_capacity() const;
  void _internal_set_current_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:worker.HeartBeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::worker::TaskStatus > tasks_;
    int32_t workerid_;
    int32_t current_capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// int32 taskId = 1;
inline void Task::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline int32_t Task::_internal_taskid() const {
  return _impl_.taskid_;
}
inline int32_t Task::taskid() const {
  // @@protoc_insertion_point(field_get:worker.Task.taskId)
  return _internal_taskid();
}
inline void Task::_internal_set_taskid(int32_t value) {
  
  _impl_.taskid_ = value;
}
inline void Task::set_taskid(int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:worker.Task.taskId)
}

// int32 priority = 2;
inline void Task::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t Task::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t Task::priority() const {
  // @@protoc_insertion_point(field_get:worker.Task.priority)
  return _internal_priority();
}
inline void Task::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void Task::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:worker.Task.priority)
}

// string commands = 3;
inline void Task::clear_commands() {
  _impl_.commands_.ClearToEmpty();
}
inline const std::string& Task::commands() const {
  // @@protoc_insertion_point(field_get:worker.Task.commands)
  return _internal_commands();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_commands(ArgT0&& arg0, ArgT... args) {
 
 _impl_.commands_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:worker.Task.commands)
}
inline std::string* Task::mutable_commands() {
  std::string* _s = _internal_mutable_commands();
  // @@protoc_insertion_point(field_mutable:worker.Task.commands)
  return _s;
}
inline const std::string& Task::_internal_commands() const {
  return _impl_.commands_.Get();
}
inline void Task::_internal_set_commands(const std::string& value) {
  
  _impl_.commands_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_commands() {
  
  return _impl_.commands_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_commands() {
  // @@protoc_insertion_point(field_release:worker.Task.commands)
  return _impl_.commands_.Release();
}
inline void Task::set_allocated_commands(std::string* commands) {
  if (commands != nullptr) {
    
  } else {
    
  }
  _impl_.commands_.SetAllocated(commands, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commands_.IsDefault()) {
    _impl_.commands_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:worker.Task.commands)
}

// string status = 4;
inline void Task::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Task::status() const {
  // @@protoc_insertion_point(field_get:worker.Task.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:worker.Task.status)
}
inline std::string* Task::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:worker.Task.status)
  return _s;
}
inline const std::string& Task::_internal_status() const {
  return _impl_.status_.Get();
}
inline void Task::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_status() {
  // @@protoc_insertion_point(field_release:worker.Task.status)
  return _impl_.status_.Release();
}
inline void Task::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:worker.Task.status)
}

// -------------------------------------------------------------------

// TaskStatus

// string status = 1;
inline void TaskStatus::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& TaskStatus::status() const {
  // @@protoc_insertion_point(field_get:worker.TaskStatus.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskStatus::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:worker.TaskStatus.status)
}
inline std::string* TaskStatus::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:worker.TaskStatus.status)
  return _s;
}
inline const std::string& TaskStatus::_internal_status() const {
  return _impl_.status_.Get();
}
inline void TaskStatus::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskStatus::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskStatus::release_status() {
  // @@protoc_insertion_point(field_release:worker.TaskStatus.status)
  return _impl_.status_.Release();
}
inline void TaskStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:worker.TaskStatus.status)
}

// int32 taskId = 2;
inline void TaskStatus::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline int32_t TaskStatus::_internal_taskid() const {
  return _impl_.taskid_;
}
inline int32_t TaskStatus::taskid() const {
  // @@protoc_insertion_point(field_get:worker.TaskStatus.taskId)
  return _internal_taskid();
}
inline void TaskStatus::_internal_set_taskid(int32_t value) {
  
  _impl_.taskid_ = value;
}
inline void TaskStatus::set_taskid(int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:worker.TaskStatus.taskId)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// int32 workerId = 1;
inline void HeartBeatRequest::clear_workerid() {
  _impl_.workerid_ = 0;
}
inline int32_t HeartBeatRequest::_internal_workerid() const {
  return _impl_.workerid_;
}
inline int32_t HeartBeatRequest::workerid() const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatRequest.workerId)
  return _internal_workerid();
}
inline void HeartBeatRequest::_internal_set_workerid(int32_t value) {
  
  _impl_.workerid_ = value;
}
inline void HeartBeatRequest::set_workerid(int32_t value) {
  _internal_set_workerid(value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatRequest.workerId)
}

// repeated int32 taskId = 2;
inline int HeartBeatRequest::_internal_taskid_size() const {
  return _impl_.taskid_.size();
}
inline int HeartBeatRequest::taskid_size() const {
  return _internal_taskid_size();
}
inline void HeartBeatRequest::clear_taskid() {
  _impl_.taskid_.Clear();
}
inline int32_t HeartBeatRequest::_internal_taskid(int index) const {
  return _impl_.taskid_.Get(index);
}
inline int32_t HeartBeatRequest::taskid(int index) const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatRequest.taskId)
  return _internal_taskid(index);
}
inline void HeartBeatRequest::set_taskid(int index, int32_t value) {
  _impl_.taskid_.Set(index, value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatRequest.taskId)
}
inline void HeartBeatRequest::_internal_add_taskid(int32_t value) {
  _impl_.taskid_.Add(value);
}
inline void HeartBeatRequest::add_taskid(int32_t value) {
  _internal_add_taskid(value);
  // @@protoc_insertion_point(field_add:worker.HeartBeatRequest.taskId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HeartBeatRequest::_internal_taskid() const {
  return _impl_.taskid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HeartBeatRequest::taskid() const {
  // @@protoc_insertion_point(field_list:worker.HeartBeatRequest.taskId)
  return _internal_taskid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HeartBeatRequest::_internal_mutable_taskid() {
  return &_impl_.taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HeartBeatRequest::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable_list:worker.HeartBeatRequest.taskId)
  return _internal_mutable_taskid();
}

// repeated string status = 3;
inline int HeartBeatRequest::_internal_status_size() const {
  return _impl_.status_.size();
}
inline int HeartBeatRequest::status_size() const {
  return _internal_status_size();
}
inline void HeartBeatRequest::clear_status() {
  _impl_.status_.Clear();
}
inline std::string* HeartBeatRequest::add_status() {
  std::string* _s = _internal_add_status();
  // @@protoc_insertion_point(field_add_mutable:worker.HeartBeatRequest.status)
  return _s;
}
inline const std::string& HeartBeatRequest::_internal_status(int index) const {
  return _impl_.status_.Get(index);
}
inline const std::string& HeartBeatRequest::status(int index) const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatRequest.status)
  return _internal_status(index);
}
inline std::string* HeartBeatRequest::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:worker.HeartBeatRequest.status)
  return _impl_.status_.Mutable(index);
}
inline void HeartBeatRequest::set_status(int index, const std::string& value) {
  _impl_.status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::set_status(int index, std::string&& value) {
  _impl_.status_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::set_status(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::set_status(int index, const char* value, size_t size) {
  _impl_.status_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:worker.HeartBeatRequest.status)
}
inline std::string* HeartBeatRequest::_internal_add_status() {
  return _impl_.status_.Add();
}
inline void HeartBeatRequest::add_status(const std::string& value) {
  _impl_.status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::add_status(std::string&& value) {
  _impl_.status_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::add_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.status_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:worker.HeartBeatRequest.status)
}
inline void HeartBeatRequest::add_status(const char* value, size_t size) {
  _impl_.status_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:worker.HeartBeatRequest.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HeartBeatRequest::status() const {
  // @@protoc_insertion_point(field_list:worker.HeartBeatRequest.status)
  return _impl_.status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HeartBeatRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:worker.HeartBeatRequest.status)
  return &_impl_.status_;
}

// int32 current_capacity = 4;
inline void HeartBeatRequest::clear_current_capacity() {
  _impl_.current_capacity_ = 0;
}
inline int32_t HeartBeatRequest::_internal_current_capacity() const {
  return _impl_.current_capacity_;
}
inline int32_t HeartBeatRequest::current_capacity() const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatRequest.current_capacity)
  return _internal_current_capacity();
}
inline void HeartBeatRequest::_internal_set_current_capacity(int32_t value) {
  
  _impl_.current_capacity_ = value;
}
inline void HeartBeatRequest::set_current_capacity(int32_t value) {
  _internal_set_current_capacity(value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatRequest.current_capacity)
}

// -------------------------------------------------------------------

// HeartBeatResponse

// int32 workerId = 1;
inline void HeartBeatResponse::clear_workerid() {
  _impl_.workerid_ = 0;
}
inline int32_t HeartBeatResponse::_internal_workerid() const {
  return _impl_.workerid_;
}
inline int32_t HeartBeatResponse::workerid() const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatResponse.workerId)
  return _internal_workerid();
}
inline void HeartBeatResponse::_internal_set_workerid(int32_t value) {
  
  _impl_.workerid_ = value;
}
inline void HeartBeatResponse::set_workerid(int32_t value) {
  _internal_set_workerid(value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatResponse.workerId)
}

// int32 current_capacity = 2;
inline void HeartBeatResponse::clear_current_capacity() {
  _impl_.current_capacity_ = 0;
}
inline int32_t HeartBeatResponse::_internal_current_capacity() const {
  return _impl_.current_capacity_;
}
inline int32_t HeartBeatResponse::current_capacity() const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatResponse.current_capacity)
  return _internal_current_capacity();
}
inline void HeartBeatResponse::_internal_set_current_capacity(int32_t value) {
  
  _impl_.current_capacity_ = value;
}
inline void HeartBeatResponse::set_current_capacity(int32_t value) {
  _internal_set_current_capacity(value);
  // @@protoc_insertion_point(field_set:worker.HeartBeatResponse.current_capacity)
}

// repeated .worker.TaskStatus tasks = 3;
inline int HeartBeatResponse::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int HeartBeatResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline void HeartBeatResponse::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline ::worker::TaskStatus* HeartBeatResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:worker.HeartBeatResponse.tasks)
  return _impl_.tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::worker::TaskStatus >*
HeartBeatResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:worker.HeartBeatResponse.tasks)
  return &_impl_.tasks_;
}
inline const ::worker::TaskStatus& HeartBeatResponse::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline const ::worker::TaskStatus& HeartBeatResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:worker.HeartBeatResponse.tasks)
  return _internal_tasks(index);
}
inline ::worker::TaskStatus* HeartBeatResponse::_internal_add_tasks() {
  return _impl_.tasks_.Add();
}
inline ::worker::TaskStatus* HeartBeatResponse::add_tasks() {
  ::worker::TaskStatus* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:worker.HeartBeatResponse.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::worker::TaskStatus >&
HeartBeatResponse::tasks() const {
  // @@protoc_insertion_point(field_list:worker.HeartBeatResponse.tasks)
  return _impl_.tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace worker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_2eproto
