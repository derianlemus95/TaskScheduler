// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: task.proto

#include "task.pb.h"
#include "task.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace worker {

static const char* Scheduler_method_names[] = {
  "/worker.Scheduler/SubmitTask",
  "/worker.Scheduler/Heartbeat",
};

std::unique_ptr< Scheduler::Stub> Scheduler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scheduler::Stub> stub(new Scheduler::Stub(channel, options));
  return stub;
}

Scheduler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitTask_(Scheduler_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(Scheduler_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Scheduler::Stub::SubmitTask(::grpc::ClientContext* context, const ::worker::Task& request, ::worker::TaskStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::worker::Task, ::worker::TaskStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTask_, context, request, response);
}

void Scheduler::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::worker::Task* request, ::worker::TaskStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::worker::Task, ::worker::TaskStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, std::move(f));
}

void Scheduler::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::worker::Task* request, ::worker::TaskStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::worker::TaskStatus>* Scheduler::Stub::PrepareAsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::worker::Task& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::worker::TaskStatus, ::worker::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::worker::TaskStatus>* Scheduler::Stub::AsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::worker::Task& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>* Scheduler::Stub::HeartbeatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>::Create(channel_.get(), rpcmethod_Heartbeat_, context);
}

void Scheduler::Stub::async::Heartbeat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::worker::HeartBeatRequest,::worker::HeartBeatResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::worker::HeartBeatRequest,::worker::HeartBeatResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>* Scheduler::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>* Scheduler::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, false, nullptr);
}

Scheduler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scheduler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scheduler::Service, ::worker::Task, ::worker::TaskStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scheduler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::worker::Task* req,
             ::worker::TaskStatus* resp) {
               return service->SubmitTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scheduler_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Scheduler::Service, ::worker::HeartBeatRequest, ::worker::HeartBeatResponse>(
          [](Scheduler::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::worker::HeartBeatResponse,
             ::worker::HeartBeatRequest>* stream) {
               return service->Heartbeat(ctx, stream);
             }, this)));
}

Scheduler::Service::~Service() {
}

::grpc::Status Scheduler::Service::SubmitTask(::grpc::ServerContext* context, const ::worker::Task* request, ::worker::TaskStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scheduler::Service::Heartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::worker::HeartBeatResponse, ::worker::HeartBeatRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace worker

