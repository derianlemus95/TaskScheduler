// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace worker {
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.commands_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.taskid_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR TaskStatus::TaskStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.taskid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStatusDefaultTypeInternal() {}
  union {
    TaskStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatRequest::HeartBeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskid_)*/{}
  , /*decltype(_impl_._taskid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.status_)*/{}
  , /*decltype(_impl_.workerid_)*/0
  , /*decltype(_impl_.current_capacity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatRequestDefaultTypeInternal() {}
  union {
    HeartBeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatResponse::HeartBeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.workerid_)*/0
  , /*decltype(_impl_.current_capacity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatResponseDefaultTypeInternal() {}
  union {
    HeartBeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
}  // namespace worker
static ::_pb::Metadata file_level_metadata_task_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_task_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const uint32_t TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::worker::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::worker::Task, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::worker::Task, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::worker::Task, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::worker::Task, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::worker::TaskStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::worker::TaskStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::worker::TaskStatus, _impl_.taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatRequest, _impl_.workerid_),
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatRequest, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatRequest, _impl_.current_capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatResponse, _impl_.workerid_),
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatResponse, _impl_.current_capacity_),
  PROTOBUF_FIELD_OFFSET(::worker::HeartBeatResponse, _impl_.tasks_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::worker::Task)},
  { 10, -1, -1, sizeof(::worker::TaskStatus)},
  { 18, -1, -1, sizeof(::worker::HeartBeatRequest)},
  { 28, -1, -1, sizeof(::worker::HeartBeatResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::worker::_Task_default_instance_._instance,
  &::worker::_TaskStatus_default_instance_._instance,
  &::worker::_HeartBeatRequest_default_instance_._instance,
  &::worker::_HeartBeatResponse_default_instance_._instance,
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\022\006worker\"J\n\004Task\022\016\n\006taskId\030\001"
  " \001(\005\022\020\n\010priority\030\002 \001(\005\022\020\n\010commands\030\003 \001(\t"
  "\022\016\n\006status\030\004 \001(\t\",\n\nTaskStatus\022\016\n\006status"
  "\030\001 \001(\t\022\016\n\006taskId\030\002 \001(\005\"^\n\020HeartBeatReque"
  "st\022\020\n\010workerId\030\001 \001(\005\022\016\n\006taskId\030\002 \003(\005\022\016\n\006"
  "status\030\003 \003(\t\022\030\n\020current_capacity\030\004 \001(\005\"b"
  "\n\021HeartBeatResponse\022\020\n\010workerId\030\001 \001(\005\022\030\n"
  "\020current_capacity\030\002 \001(\005\022!\n\005tasks\030\003 \003(\0132\022"
  ".worker.TaskStatus2\201\001\n\tScheduler\022.\n\nSubm"
  "itTask\022\014.worker.Task\032\022.worker.TaskStatus"
  "\022D\n\tHeartbeat\022\030.worker.HeartBeatRequest\032"
  "\031.worker.HeartBeatResponse(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_task_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_task_2eproto = {
    false, false, 478, descriptor_table_protodef_task_2eproto,
    "task.proto",
    &descriptor_table_task_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_task_2eproto::offsets,
    file_level_metadata_task_2eproto, file_level_enum_descriptors_task_2eproto,
    file_level_service_descriptors_task_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_task_2eproto_getter() {
  return &descriptor_table_task_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_task_2eproto(&descriptor_table_task_2eproto);
namespace worker {

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:worker.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.commands_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commands_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commands().empty()) {
    _this->_impl_.commands_.Set(from._internal_commands(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:worker.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.taskid_){0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.commands_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commands_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:worker.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.Destroy();
  _impl_.status_.Destroy();
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:worker.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_commands();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "worker.Task.commands"));
        } else
          goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "worker.Task.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:worker.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // int32 priority = 2;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_priority(), target);
  }

  // string commands = 3;
  if (!this->_internal_commands().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commands().data(), static_cast<int>(this->_internal_commands().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "worker.Task.commands");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_commands(), target);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "worker.Task.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:worker.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:worker.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string commands = 3;
  if (!this->_internal_commands().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commands());
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taskid());
  }

  // int32 priority = 2;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:worker.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commands().empty()) {
    _this->_internal_set_commands(from._internal_commands());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:worker.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commands_, lhs_arena,
      &other->_impl_.commands_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.priority_)
      + sizeof(Task::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.taskid_)>(
          reinterpret_cast<char*>(&_impl_.taskid_),
          reinterpret_cast<char*>(&other->_impl_.taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[0]);
}

// ===================================================================

class TaskStatus::_Internal {
 public:
};

TaskStatus::TaskStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:worker.TaskStatus)
}
TaskStatus::TaskStatus(const TaskStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.taskid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.taskid_ = from._impl_.taskid_;
  // @@protoc_insertion_point(copy_constructor:worker.TaskStatus)
}

inline void TaskStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.taskid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:worker.TaskStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void TaskStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:worker.TaskStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.taskid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "worker.TaskStatus.status"));
        } else
          goto handle_unusual;
        continue;
      // int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:worker.TaskStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "worker.TaskStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int32 taskId = 2;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:worker.TaskStatus)
  return target;
}

size_t TaskStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:worker.TaskStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 taskId = 2;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStatus::GetClassData() const { return &_class_data_; }


void TaskStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskStatus*>(&to_msg);
  auto& from = static_cast<const TaskStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:worker.TaskStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:worker.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  return true;
}

void TaskStatus::InternalSwap(TaskStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  swap(_impl_.taskid_, other->_impl_.taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[1]);
}

// ===================================================================

class HeartBeatRequest::_Internal {
 public:
};

HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:worker.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){from._impl_.taskid_}
    , /*decltype(_impl_._taskid_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){from._impl_.status_}
    , decltype(_impl_.workerid_){}
    , decltype(_impl_.current_capacity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.workerid_, &from._impl_.workerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_capacity_) -
    reinterpret_cast<char*>(&_impl_.workerid_)) + sizeof(_impl_.current_capacity_));
  // @@protoc_insertion_point(copy_constructor:worker.HeartBeatRequest)
}

inline void HeartBeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskid_){arena}
    , /*decltype(_impl_._taskid_cached_byte_size_)*/{0}
    , decltype(_impl_.status_){arena}
    , decltype(_impl_.workerid_){0}
    , decltype(_impl_.current_capacity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:worker.HeartBeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskid_.~RepeatedField();
  _impl_.status_.~RepeatedPtrField();
}

void HeartBeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:worker.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskid_.Clear();
  _impl_.status_.Clear();
  ::memset(&_impl_.workerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_capacity_) -
      reinterpret_cast<char*>(&_impl_.workerid_)) + sizeof(_impl_.current_capacity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 workerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 taskId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_taskid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_taskid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_status();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "worker.HeartBeatRequest.status"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 current_capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.current_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:worker.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_workerid(), target);
  }

  // repeated int32 taskId = 2;
  {
    int byte_size = _impl_._taskid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_taskid(), byte_size, target);
    }
  }

  // repeated string status = 3;
  for (int i = 0, n = this->_internal_status_size(); i < n; i++) {
    const auto& s = this->_internal_status(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "worker.HeartBeatRequest.status");
    target = stream->WriteString(3, s, target);
  }

  // int32 current_capacity = 4;
  if (this->_internal_current_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:worker.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:worker.HeartBeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 taskId = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.taskid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._taskid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string status = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.status_.size());
  for (int i = 0, n = _impl_.status_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.status_.Get(i));
  }

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_workerid());
  }

  // int32 current_capacity = 4;
  if (this->_internal_current_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_capacity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatRequest::GetClassData() const { return &_class_data_; }


void HeartBeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartBeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:worker.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.taskid_.MergeFrom(from._impl_.taskid_);
  _this->_impl_.status_.MergeFrom(from._impl_.status_);
  if (from._internal_workerid() != 0) {
    _this->_internal_set_workerid(from._internal_workerid());
  }
  if (from._internal_current_capacity() != 0) {
    _this->_internal_set_current_capacity(from._internal_current_capacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:worker.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.taskid_.InternalSwap(&other->_impl_.taskid_);
  _impl_.status_.InternalSwap(&other->_impl_.status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatRequest, _impl_.current_capacity_)
      + sizeof(HeartBeatRequest::_impl_.current_capacity_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatRequest, _impl_.workerid_)>(
          reinterpret_cast<char*>(&_impl_.workerid_),
          reinterpret_cast<char*>(&other->_impl_.workerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[2]);
}

// ===================================================================

class HeartBeatResponse::_Internal {
 public:
};

HeartBeatResponse::HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:worker.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.workerid_){}
    , decltype(_impl_.current_capacity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.workerid_, &from._impl_.workerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_capacity_) -
    reinterpret_cast<char*>(&_impl_.workerid_)) + sizeof(_impl_.current_capacity_));
  // @@protoc_insertion_point(copy_constructor:worker.HeartBeatResponse)
}

inline void HeartBeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.workerid_){0}
    , decltype(_impl_.current_capacity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:worker.HeartBeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
}

void HeartBeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:worker.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  ::memset(&_impl_.workerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_capacity_) -
      reinterpret_cast<char*>(&_impl_.workerid_)) + sizeof(_impl_.current_capacity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 workerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .worker.TaskStatus tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:worker.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_workerid(), target);
  }

  // int32 current_capacity = 2;
  if (this->_internal_current_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_capacity(), target);
  }

  // repeated .worker.TaskStatus tasks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:worker.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:worker.HeartBeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .worker.TaskStatus tasks = 3;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_workerid());
  }

  // int32 current_capacity = 2;
  if (this->_internal_current_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_capacity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatResponse::GetClassData() const { return &_class_data_; }


void HeartBeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartBeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:worker.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_workerid() != 0) {
    _this->_internal_set_workerid(from._internal_workerid());
  }
  if (from._internal_current_capacity() != 0) {
    _this->_internal_set_current_capacity(from._internal_current_capacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:worker.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatResponse, _impl_.current_capacity_)
      + sizeof(HeartBeatResponse::_impl_.current_capacity_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatResponse, _impl_.workerid_)>(
          reinterpret_cast<char*>(&_impl_.workerid_),
          reinterpret_cast<char*>(&other->_impl_.workerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace worker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::worker::Task*
Arena::CreateMaybeMessage< ::worker::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::worker::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::worker::TaskStatus*
Arena::CreateMaybeMessage< ::worker::TaskStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::worker::TaskStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::worker::HeartBeatRequest*
Arena::CreateMaybeMessage< ::worker::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::worker::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::worker::HeartBeatResponse*
Arena::CreateMaybeMessage< ::worker::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::worker::HeartBeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
